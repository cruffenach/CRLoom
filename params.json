{"name":"CRLoom","tagline":"Core Data Threading Made Easy","body":"## Introduction\r\nCRLoom is an unobtrusive framework for easing the pains of moving your Core Data interactions off of the main thread.\r\n\r\n### Motivations\r\nWhen creating iOS applications, I regularly would make calls to web services, be delivered a collection of objects and need to create or update objects in my `NSManagedObjectContext` with the data. \r\n\r\nCommonly I would do this on the main thread and would notice my tableviews stutter, or for very large collections even freeze for a moment or two. To solve this I began doing my collection import work off of the main thread. I have generalized some of the patterns I used to move off the main thread into `CRLoom`, an unobtrusive framework for easing the pains of Core Data threading.\r\n\r\n### Quick Start\r\nIf you have an existing application using Core Data your ready to use CRLoom. \r\n\r\n- Create a category \"import\" for the `NSManagedObject` whose creation or updating you want to do on a background thread.\r\n- In \"import\" implement\r\n\r\n```\r\n+ (NSString*)uniqueDataIdentifierKey {\r\n    //The key for the unique identifier in the dictionary representing the object coming from your API\r\n}\r\n```\r\n\r\n```\r\n+ (NSString*)uniqueModelIdentifierKey {\r\n    //The key for the unique identifier in the NSManagedObject your are working in\r\n}\r\n```\r\n\r\n```\r\n- (BOOL)updateWithData:(NSDictionary*)data\r\n           intoContext:(NSManagedObjectContext*)moc\r\n             withCache:(NSCache*)cache\r\n                 error:(NSError**)error {\t\t\t\t\t\t\t\t \r\n    //Hydrate your core data object with the data from your API\r\n}\r\n```\r\n\r\n```\r\n- (BOOL)isIdenticalToData:(NSDictionary*)data {\r\n    //Check whether the NSManagedObject is already identical to the data handed down.\r\n}\r\n```\r\n\r\n- Create an instance of `NSManagedObjectImportOperation` using \r\n\r\n```\r\n+ (id)operationWithData:(id)data\r\n     managedObjectClass:(Class)class\r\n       guaranteedInsert:(BOOL)guaranteedInsert\r\n       saveOnCompletion:(BOOL)saveOnCompletion\r\n               useCache:(BOOL)useCache\r\n                  error:(NSError**)error;\r\n```\r\n\r\nProvide the data to by synthesize, the NSManagedObject subclass in question. There are a few other options you can set for your specific needs. \r\n\r\n- Add the operation into an `NSOperationQueue`. \r\n\r\nThe import of that data will now be done on a background thread, saved and merged into the main thread context.\r\n\r\n### Continuted Development\r\n\r\nI have found this to be useful for many of the threading use cases I have run into, but there is a lot of room to grow. Issues and Pulls welcome. Enjoy.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}